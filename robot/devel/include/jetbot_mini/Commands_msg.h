// Generated by gencpp from file jetbot_mini/Commands_msg.msg
// DO NOT EDIT!


#ifndef JETBOT_MINI_MESSAGE_COMMANDS_MSG_H
#define JETBOT_MINI_MESSAGE_COMMANDS_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetbot_mini
{
template <class ContainerAllocator>
struct Commands_msg_
{
  typedef Commands_msg_<ContainerAllocator> Type;

  Commands_msg_()
    : action()
    , subject()
    , value(0.0)
    , unit()  {
    }
  Commands_msg_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , subject(_alloc)
    , value(0.0)
    , unit(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subject_type;
  _subject_type subject;

   typedef double _value_type;
  _value_type value;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _unit_type;
  _unit_type unit;





  typedef boost::shared_ptr< ::jetbot_mini::Commands_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetbot_mini::Commands_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Commands_msg_

typedef ::jetbot_mini::Commands_msg_<std::allocator<void> > Commands_msg;

typedef boost::shared_ptr< ::jetbot_mini::Commands_msg > Commands_msgPtr;
typedef boost::shared_ptr< ::jetbot_mini::Commands_msg const> Commands_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetbot_mini::Commands_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetbot_mini::Commands_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetbot_mini::Commands_msg_<ContainerAllocator1> & lhs, const ::jetbot_mini::Commands_msg_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.subject == rhs.subject &&
    lhs.value == rhs.value &&
    lhs.unit == rhs.unit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetbot_mini::Commands_msg_<ContainerAllocator1> & lhs, const ::jetbot_mini::Commands_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetbot_mini

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetbot_mini::Commands_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetbot_mini::Commands_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot_mini::Commands_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot_mini::Commands_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot_mini::Commands_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot_mini::Commands_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetbot_mini::Commands_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88c97c65bce824d2b08b3ca7fe1f5632";
  }

  static const char* value(const ::jetbot_mini::Commands_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88c97c65bce824d2ULL;
  static const uint64_t static_value2 = 0xb08b3ca7fe1f5632ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetbot_mini::Commands_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetbot_mini/Commands_msg";
  }

  static const char* value(const ::jetbot_mini::Commands_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetbot_mini::Commands_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string subject\n"
"float64 value\n"
"string unit\n"
;
  }

  static const char* value(const ::jetbot_mini::Commands_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetbot_mini::Commands_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.subject);
      stream.next(m.value);
      stream.next(m.unit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Commands_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetbot_mini::Commands_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetbot_mini::Commands_msg_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "subject: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subject);
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
    s << indent << "unit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.unit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETBOT_MINI_MESSAGE_COMMANDS_MSG_H
