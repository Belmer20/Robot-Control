// Generated by gencpp from file jetbot_mini/Command_classes.msg
// DO NOT EDIT!


#ifndef JETBOT_MINI_MESSAGE_COMMAND_CLASSES_H
#define JETBOT_MINI_MESSAGE_COMMAND_CLASSES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetbot_mini
{
template <class ContainerAllocator>
struct Command_classes_
{
  typedef Command_classes_<ContainerAllocator> Type;

  Command_classes_()
    : action()
    , subject()
    , value()
    , unit()  {
    }
  Command_classes_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , subject(_alloc)
    , value(_alloc)
    , unit(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subject_type;
  _subject_type subject;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _value_type;
  _value_type value;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _unit_type;
  _unit_type unit;





  typedef boost::shared_ptr< ::jetbot_mini::Command_classes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetbot_mini::Command_classes_<ContainerAllocator> const> ConstPtr;

}; // struct Command_classes_

typedef ::jetbot_mini::Command_classes_<std::allocator<void> > Command_classes;

typedef boost::shared_ptr< ::jetbot_mini::Command_classes > Command_classesPtr;
typedef boost::shared_ptr< ::jetbot_mini::Command_classes const> Command_classesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetbot_mini::Command_classes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetbot_mini::Command_classes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetbot_mini::Command_classes_<ContainerAllocator1> & lhs, const ::jetbot_mini::Command_classes_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.subject == rhs.subject &&
    lhs.value == rhs.value &&
    lhs.unit == rhs.unit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetbot_mini::Command_classes_<ContainerAllocator1> & lhs, const ::jetbot_mini::Command_classes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetbot_mini

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetbot_mini::Command_classes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetbot_mini::Command_classes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot_mini::Command_classes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot_mini::Command_classes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot_mini::Command_classes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot_mini::Command_classes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetbot_mini::Command_classes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06f8489ff1e7fcaba60778ad9099d7c2";
  }

  static const char* value(const ::jetbot_mini::Command_classes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06f8489ff1e7fcabULL;
  static const uint64_t static_value2 = 0xa60778ad9099d7c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetbot_mini::Command_classes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetbot_mini/Command_classes";
  }

  static const char* value(const ::jetbot_mini::Command_classes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetbot_mini::Command_classes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string subject\n"
"string value\n"
"string unit\n"
;
  }

  static const char* value(const ::jetbot_mini::Command_classes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetbot_mini::Command_classes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.subject);
      stream.next(m.value);
      stream.next(m.unit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_classes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetbot_mini::Command_classes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetbot_mini::Command_classes_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "subject: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subject);
    s << indent << "value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.value);
    s << indent << "unit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.unit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETBOT_MINI_MESSAGE_COMMAND_CLASSES_H
